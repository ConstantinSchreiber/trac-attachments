--- a/src/aircrack-ng.c	2013-03-04 21:39:02.931928400 +0100
+++ b/src/aircrack-ng.c	2013-03-08 01:52:26.928312500 +0100
@@ -103,6 +103,7 @@
 pthread_mutex_t mx_apl;			 /* lock write access to ap LL   */
 pthread_mutex_t mx_eof;			 /* lock write access to nb_eof  */
 pthread_mutex_t mx_ivb;			 /* lock access to ivbuf array   */
+pthread_mutex_t mx_dic;			 /* lock access to opt.dict      */
 pthread_cond_t  cv_eof;			 /* read EOF condition variable  */
 int  nb_eof = 0;				 /* # of threads who reached eof */
 long nb_pkt = 0;				 /* # of packets read so far     */
@@ -3995,12 +3996,13 @@
 			if (memcmp( mic[j], ap->wpa.keymic, 16 ) == 0)
 			{
 				// to stop do_wpa_crack, we close the dictionary
+				pthread_mutex_lock( &mx_dic );
 				if(opt.dict != NULL)
 				{
 					if (!opt.stdin_dict) fclose(opt.dict);
 					opt.dict = NULL;
 				}
-
+				pthread_mutex_unlock( &mx_dic );
 				for( i = 0; i < opt.nbcpu; i++ )
 				{
 					// we make sure do_wpa_crack doesn't block before exiting,
@@ -4085,14 +4087,18 @@
  */
 int next_dict(int nb)
 {
+
+	pthread_mutex_lock( &mx_dic );
 	if(opt.dict != NULL)
 	{
 		if(!opt.stdin_dict) fclose(opt.dict);
 		opt.dict = NULL;
 	}
 	opt.nbdict = nb;
-	if(opt.dicts[opt.nbdict] == NULL)
+	if(opt.dicts[opt.nbdict] == NULL) {
+		pthread_mutex_unlock( &mx_dic );
 		return( FAILURE );
+	}
 
 	while(opt.nbdict < MAX_DICTS && opt.dicts[opt.nbdict] != NULL)
 	{
@@ -4135,6 +4141,8 @@
 		break;
 	}
 
+	pthread_mutex_unlock( &mx_dic );
+
 	if(opt.nbdict >= MAX_DICTS || opt.dicts[opt.nbdict] == NULL)
 	    return( FAILURE );
 
@@ -4507,29 +4515,40 @@
 	{
 		/* read a couple of keys (skip those < 8 chars) */
 
-		if(opt.dict == NULL)
-			return( FAILURE );
-
+		pthread_mutex_lock( &mx_dic );
+		if(opt.dict == NULL) {
+				pthread_mutex_unlock( &mx_dic );
+				return( FAILURE );
+			}
+		pthread_mutex_unlock( &mx_dic );
 		do
 		{
 			memset(key1, 0, sizeof(key1));
 			if (_speed_test)
 				strcpy(key1, "sorbosorbo");
-			else if (fgets(key1, sizeof(key1), opt.dict) == NULL)
-			{
-				if( opt.l33t )
-					printf( "\33[32;22m" );
-
-				/* printf( "\nPassphrase not in dictionary %s \n", opt.dicts[opt.nbdict] );*/
-				if(next_dict(opt.nbdict+1) != 0)
+			else {
+				pthread_mutex_lock( &mx_dic );
+				if (fgets(key1, sizeof(key1), opt.dict) == NULL)
 				{
-					/* no more words, but we still have to wait for the cracking threads */
-					num_cpus = cid;
-					//goto collect_and_test;
-					return( FAILURE );
-				}
-				else
+					pthread_mutex_unlock( &mx_dic );
+
+					if( opt.l33t )
+						printf( "\33[32;22m" );
+					/* printf( "\nPassphrase not in dictionary %s \n", opt.dicts[opt.nbdict] );*/
+					if(next_dict(opt.nbdict+1) != 0)
+					{
+						/* no more words, but we still have to wait for the cracking threads */
+						num_cpus = cid;
+						//goto collect_and_test;
+						return( FAILURE );
+					}
+				else {
+					pthread_mutex_unlock( &mx_dic );
 					continue;
+					}
+				}
+				pthread_mutex_unlock( &mx_dic );
+
 			}
 
 			i = strlen( key1 );
@@ -5453,6 +5472,7 @@
 	pthread_mutex_init( &mx_apl, NULL );
 	pthread_mutex_init( &mx_ivb, NULL );
 	pthread_mutex_init( &mx_eof, NULL );
+	pthread_mutex_init( &mx_dic, NULL );
 	pthread_cond_init(  &cv_eof, NULL );
 
 	ap_1st = NULL;
