diff -uprN aircrack-ng/manpages/airodump-ng.8 dev/aircrack-ng/manpages/airodump-ng.8
--- aircrack-ng/manpages/airodump-ng.8	2015-03-22 16:01:10.518526901 +0800
+++ dev/aircrack-ng/manpages/airodump-ng.8	2015-03-22 19:52:00.000000000 +0800
@@ -59,6 +59,9 @@ Display a manufacturer column with the i
 .I -U, --uptime
 Display APs uptime obtained from its beacon timestamp.
 .TP
+.I -z, --wps
+Display a WPS column with WPS version, config method(s), AP Setup Locked obtained from APs beacon or probe response (if any).
+.TP
 .I --output-format <formats>
 Define the formats to use (separated by a comma). Possible values are: pcap, ivs, csv, gps, kismet, netxml. The default values are: pcap, csv, kismet, kismet-newcore.
 \(aqpcap\(aq is for recording a capture in pcap format, \(aqivs\(aq is for ivs format (it is a shortcut for --ivs). \(aqcsv\(aq will create an airodump-ng CSV file, \(aqkismet\(aq will create a kismet csv file and \(aqkismet-newcore\(aq will create the kismet netxml file. \(aqgps\(aq is a shortcut for --gps.
@@ -195,9 +198,18 @@ The cipher detected. One of CCMP, WRAP,
 .I AUTH
 The authentication protocol used. One of MGT (WPA/WPA2 using a separate authentication server), SKA (shared key for WEP), PSK (pre-shared key for WPA/WPA2), or OPN (open for WEP).
 .TP
+.I UPTIME
+This is only displayed when --uptime (or -U) is specified.
+.TP
+.I WPS
+This is only displayed when --wps (or -z) is specified. If the AP supports WPS, the first field of the column indicates version supported. The second field indicates WPS config methods (can be more than one method, separated by comma): USB = USB method, ETHER = Ethernet, LAB = Label, DISP = Display, EXTNFC = External NFC, INTNFC = Internal NFC, NFCINTF = NFC Interface, PBC = Push Button, KPAD =  Keypad. Locked is displayed when AP setup is locked.
+.TP
 .I ESSID
 The so-called "SSID", which can be empty if SSID hiding is activated. In this case, airodump-ng will try to recover the SSID from probe responses and association requests.
 .TP
+.I MANUFACTURER
+This is only displayed when --manufacturer (or -M) is specified.
+.TP
 .I STATION
 MAC address of each associated station or stations searching for an AP to connect with. Clients not currently associated with an AP have a BSSID of "(not associated)".
 .TP
diff -uprN aircrack-ng/src/airodump-ng.c dev/aircrack-ng/src/airodump-ng.c
--- aircrack-ng/src/airodump-ng.c	2015-03-22 16:01:10.590526903 +0800
+++ dev/aircrack-ng/src/airodump-ng.c	2015-03-22 19:45:40.000000000 +0800
@@ -1422,9 +1422,15 @@ int dump_add_packet( unsigned char *h802
 //         if(ap_cur->fcapt >= QLT_COUNT) update_rx_quality();
     }
 
-    if( h80211[0] == 0x80 )
+    switch( h80211[0] )
     {
-        ap_cur->nb_bcn++;
+        case  0x80:
+            ap_cur->nb_bcn++;
+        case  0x50:
+            /* reset the WPS state */
+            ap_cur->wps.state = 0xFF;
+            ap_cur->wps.ap_setup_locked = 0;
+            break;
     }
 
     ap_cur->nb_pkt++;
@@ -1845,6 +1851,54 @@ skip_probe:
                 ap_cur->security |= STD_QOS;
                 p += length+2;
             }
+            else if( (type == 0xDD && (length >= 4) && (memcmp(p+2, "\x00\x50\xF2\x04", 4) == 0)))
+            {
+                org_p = p;
+                p+=6;
+                int len = length, subtype = 0, sublen = 0;
+                while(len >= 4)
+                {
+                    subtype = (p[0] << 8) + p[1];
+                    sublen = (p[2] << 8) + p[3];
+                    if(sublen > len)
+                        break;
+                    switch(subtype)
+                    {
+                    case 0x104a: // WPS Version
+                        ap_cur->wps.version = p[4];
+                        break;
+                    case 0x1011: // Device Name
+                    case 0x1012: // Device Password ID
+                    case 0x1021: // Manufacturer
+                    case 0x1023: // Model
+                    case 0x1024: // Model Number
+                    case 0x103b: // Response Type
+                    case 0x103c: // RF Bands
+                    case 0x1041: // Selected Registrar
+                    case 0x1042: // Serial Number
+                        break;
+                    case 0x1044: // WPS State
+                        ap_cur->wps.state = p[4];
+                        break;
+                    case 0x1047: // UUID Enrollee
+                    case 0x1049: // Vendor Extension
+                    case 0x1054: // Primary Device Type
+                        break;
+                    case 0x1057: // AP Setup Locked
+                        ap_cur->wps.ap_setup_locked = p[4];
+                        break;
+                    case 0x1008: // Config Methods
+                    case 0x1053: // Selected Registrar Config Methods
+                        ap_cur->wps.meth = (p[4] << 8) + p[5];
+                        break;
+                    default:     // Unknown type-length-value
+                        break;
+                    }
+                    p += sublen+4;
+                    len -= sublen+4;
+                }
+                p = org_p + length+2;
+            }
             else p += length+2;
         }
     }
@@ -3106,6 +3160,22 @@ void dump_print( int ws_row, int ws_col,
     if (G.show_uptime)
     	strcat(strbuf, "       UPTIME  ");
 
+    if (G.show_wps)
+    {
+        strcat(strbuf, "WPS   ");
+        if ( ws_col > (columns_ap - 4) )
+        {
+            memset(strbuf+columns_ap, 32, G.maxsize_wps_seen - 6 );
+            snprintf(strbuf+columns_ap+G.maxsize_wps_seen-6, 9,"%s","   ESSID");
+            if ( G.show_manufacturer  )
+            {
+                memset(strbuf+columns_ap+G.maxsize_wps_seen+2, 32, G.maxsize_essid_seen-5 );
+                snprintf(strbuf+columns_ap+G.maxsize_essid_seen-5, 15,"%s","  MANUFACTURER");
+            }
+        }
+    }
+    else
+    {
     strcat(strbuf, "ESSID");
 
 	if ( G.show_manufacturer && ( ws_col > (columns_ap - 4) ) ) {
@@ -3113,7 +3183,7 @@ void dump_print( int ws_row, int ws_col,
 		memset(strbuf+columns_ap, 32, G.maxsize_essid_seen - 5 ); // 5 is the len of "ESSID"
 		snprintf(strbuf+columns_ap+G.maxsize_essid_seen-5, 15,"%s","  MANUFACTURER");
 	}
-
+    }
 	strbuf[ws_col - 1] = '\0';
 	fprintf( stderr, "%s\n", strbuf );
 
@@ -3284,13 +3354,64 @@ void dump_print( int ws_row, int ws_col,
 	    if( ws_col > (columns_ap - 4) )
 	    {
 		memset( strbuf, 0, sizeof( strbuf ) );
+		if (G.show_wps)
+		{
+		    if (ap_cur->wps.state != 0xFF)
+		    {
+		        if (ap_cur->wps.ap_setup_locked) // AP setup locked
+		            snprintf(strbuf, sizeof(strbuf)-1, "Locked");
+		        else
+		        {
+		            snprintf(strbuf, sizeof(strbuf)-1, "%d.%d", ap_cur->wps.version >> 4, ap_cur->wps.version & 0xF); // Version
+		            if (ap_cur->wps.meth) // WPS Config Methods
+		            {
+		                char tbuf[64];
+		                memset( tbuf, '\0', sizeof(tbuf) );
+		                int sep = 0;
+#define T(bit, name) do {                       \
+    if (ap_cur->wps.meth & (1<<bit)) {          \
+        if (sep)                                \
+            strcat(tbuf, ",");                  \
+        sep = 1;                                \
+        strncat(tbuf, name, (64-strlen(tbuf))); \
+    } } while (0)
+		                T(0, "USB");     // USB method
+		                T(1, "ETHER");   // Ethernet
+		                T(2, "LAB");     // Label
+		                T(3, "DISP");    // Display
+		                T(4, "EXTNFC");  // Ext. NFC Token
+		                T(5, "INTNFC");  // Int. NFC Token
+		                T(6, "NFCINTF"); // NFC Interface
+		                T(7, "PBC");     // Push Button
+		                T(8, "KPAD");    // Keypad
+		                snprintf(strbuf+strlen(strbuf), sizeof(strbuf)-strlen(strbuf), " %s", tbuf);
+#undef T
+		            }
+		        }
+		    }
+		    else
+		        snprintf(strbuf, sizeof(strbuf)-1, " ");
+
+			if (G.maxsize_wps_seen <= strlen(strbuf))
+				G.maxsize_wps_seen = strlen(strbuf);
+			else // write spaces (32)
+				memset( strbuf+strlen(strbuf), 32,  (G.maxsize_wps_seen - strlen(strbuf))  );
+		}
 		if(ap_cur->essid[0] != 0x00)
 		{
+		    if (G.show_wps)
+		    snprintf( strbuf + G.maxsize_wps_seen, sizeof(strbuf)-G.maxsize_wps_seen,
+			    "  %s", ap_cur->essid );
+		    else
 		    snprintf( strbuf,  sizeof( strbuf ) - 1,
 			    "%s", ap_cur->essid );
 		}
 		else
 		{
+		    if (G.show_wps)
+		    snprintf( strbuf + G.maxsize_wps_seen, sizeof(strbuf)-G.maxsize_wps_seen,
+			    "  <length:%3d>%s", ap_cur->ssid_length, "\x00" );
+		    else
 		    snprintf( strbuf,  sizeof( strbuf ) - 1,
 			    "<length:%3d>%s", ap_cur->ssid_length, "\x00" );
 		}
@@ -6000,6 +6121,7 @@ int main( int argc, char *argv[] )
         {"manufacturer",  0, 0, 'M'},
         {"uptime",   0, 0, 'U'},
 		{"write-interval", 1, 0, 'W'},
+        {"wps",  0, 0, 'z'},
         {0,          0, 0,  0 }
     };
 
@@ -6084,7 +6206,8 @@ int main( int argc, char *argv[] )
     G.output_format_kismet_csv = 1;
     G.output_format_kismet_netxml = 1;
     G.file_write_interval = 5; // Write file every 5 seconds by default
-
+    G.maxsize_wps_seen  =  6;
+    G.show_wps     = 0;
 #ifdef HAVE_PCRE
     G.f_essid_regex = NULL;
 #endif
@@ -6166,7 +6289,7 @@ int main( int argc, char *argv[] )
         option_index = 0;
 
         option = getopt_long( argc, argv,
-                        "b:c:egiw:s:t:u:m:d:N:R:aHDB:Ahf:r:EC:o:x:MUW:",
+                        "b:c:egiw:s:t:u:m:d:N:R:aHDB:Ahf:r:EC:o:x:MUW:z",
                         long_options, &option_index );
 
         if( option < 0 ) break;
@@ -6240,6 +6363,11 @@ int main( int argc, char *argv[] )
 	    		G.show_uptime = 1;
 	    		break;
 
+            case 'z':
+
+                G.show_wps = 1;
+                break;
+
             case 'c' :
 
                 if (G.channel[0] > 0 || G.chanoption == 1) {
@@ -6593,6 +6721,9 @@ usage:
         return( 1 );
     }
 
+    if (G.show_wps && G.show_manufacturer)
+        G.maxsize_essid_seen += G.maxsize_wps_seen;
+
     if(G.s_iface != NULL)
     {
         /* initialize cards */
diff -uprN aircrack-ng/src/airodump-ng.h dev/aircrack-ng/src/airodump-ng.h
--- aircrack-ng/src/airodump-ng.h	2015-03-22 16:01:10.594526903 +0800
+++ dev/aircrack-ng/src/airodump-ng.h	2015-03-22 19:27:09.000000000 +0800
@@ -200,6 +200,14 @@ struct oui {
 	struct oui *next;
 };
 
+/* WPS_info struct */
+struct WPS_info {
+    unsigned char version;    /* WPS Version */
+    unsigned char state;      /* Current WPS state */
+    unsigned char ap_setup_locked; /* AP setup locked */
+    unsigned int meth;        /* WPS Config Methods */
+};
+
 /* linked list of detected access points */
 struct AP_info
 {
@@ -269,6 +277,7 @@ struct AP_info
 					  
     int marked;
     int marked_color;
+    struct WPS_info wps;
 };
 
 /* linked list of detected clients */
@@ -465,6 +474,8 @@ struct globals
     int show_manufacturer;
     int show_uptime;
     int file_write_interval;
+    u_int maxsize_wps_seen;
+    int show_wps;
 }
 G;
 
