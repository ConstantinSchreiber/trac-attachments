Index: src/osdep/darwin.m
===================================================================
--- src/osdep/darwin.m	(revision 0)
+++ src/osdep/darwin.m	(revision 0)
@@ -0,0 +1,495 @@
+ /*
+  *  Copyright (c) 2009, Kyle Fuller <inbox@kylefuller.co.uk>, based upon 
+  *  freebsd.c by Andrea Bittau <a.bittau@cs.ucl.ac.uk>
+  *
+  *  OS dependent API for Darwin.
+  *
+  *  This program is free software; you can redistribute it and/or modify
+  *  it under the terms of the GNU General Public License as published by
+  *  the Free Software Foundation; either version 2 of the License, or
+  *  (at your option) any later version.
+  *
+  *  This program is distributed in the hope that it will be useful,
+  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  *  GNU General Public License for more details.
+  *
+  *  You should have received a copy of the GNU General Public License
+  *  along with this program; if not, write to the Free Software
+  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+  */
+
+#include <errno.h>
+#include <stdio.h>
+#include <fcntl.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/bpf.h>
+#include <sys/ioctl.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <ifaddrs.h>
+#import <Foundation/Foundation.h>
+#include "osdep.h"
+
+#define	IEEE80211_CRC_LEN		4
+
+// required by radiotap, not defined on OS X
+typedef unsigned char u8;
+typedef unsigned short u16;
+typedef unsigned int u32;
+
+#include "radiotap/ieee80211_radiotap.h"
+
+struct priv_darwin {
+	/* iface */
+	int				pn_fd;
+	char*			pn_iface;
+	
+	/* tx */
+	unsigned char			pn_buf[4096];
+	unsigned char			*pn_next;
+	int				pn_totlen;
+};
+
+static void do_free(struct wif *wi)
+{
+	assert(wi->wi_priv);
+	free(wi->wi_priv);
+	wi->wi_priv = 0;
+	free(wi);
+}
+
+static void get_radiotap_info(struct priv_darwin *pn,
+							  struct ieee80211_radiotap_header *rth, int *plen,
+							  struct rx_info *ri, int* fcs_ok)
+{
+	uint32_t present;
+	uint8_t rflags = 0;
+	uint16_t rxflags = 0;
+	int i;
+	unsigned char *body = (unsigned char*) (rth+1);
+	int dbm_power = 0, db_power = 0;
+	*fcs_ok = 1;
+	
+	/* reset control info */
+	if (ri)
+		memset(ri, 0, sizeof(*ri));
+	
+	/* get info */
+	present = le32toh(rth->it_present);
+	for (i = IEEE80211_RADIOTAP_TSFT; i <= IEEE80211_RADIOTAP_EXT; i++) {
+		if (!(present & (1 << i)))
+			continue;
+		
+		switch (i) {
+			case IEEE80211_RADIOTAP_TSFT:
+				body += sizeof(uint64_t);
+				break;
+				
+			case IEEE80211_RADIOTAP_FLAGS:
+				rflags = *((uint8_t*)body);
+				/* fall through */
+			case IEEE80211_RADIOTAP_RATE:
+				if (ri) {
+					uint8_t rd_rate = *((uint8_t*)body);
+					if (rd_rate & 0x80)
+						// MCS rate unsupported
+						ri->ri_rate = 1*500000;
+					else
+						ri->ri_rate = rd_rate*500000;
+				}
+				body += sizeof(uint8_t);
+				break;
+			
+			case IEEE80211_RADIOTAP_CHANNEL:
+				body += sizeof(uint16_t)*2;
+				break;
+				
+			case IEEE80211_RADIOTAP_FHSS:
+				body += sizeof(uint16_t);
+				break;
+				
+			case IEEE80211_RADIOTAP_DBM_ANTSIGNAL:
+				dbm_power = *body++;
+				break;
+				
+			case IEEE80211_RADIOTAP_DBM_ANTNOISE:
+				dbm_power -= *body++;
+				break;
+				
+			case IEEE80211_RADIOTAP_DB_ANTSIGNAL:
+				db_power = *body++;
+				break;
+				
+			case IEEE80211_RADIOTAP_DB_ANTNOISE:
+				db_power -= *body++;
+				break;
+			
+			case IEEE80211_RADIOTAP_ANTENNA:
+				body++;
+				break;
+				
+			case IEEE80211_RADIOTAP_RX_FLAGS:
+				rxflags = *((uint16_t*)body);
+				body += sizeof(uint16_t);
+				break;
+			
+			case 18: // IEEE80211_RADIOTAP_XCHANNEL
+				body += sizeof(uint32_t);
+				body += sizeof(uint16_t);
+				if (ri) {
+					ri->ri_channel = *((uint8_t*)body);
+				}
+				body += sizeof(uint8_t);
+				body += sizeof(uint8_t);
+				break;
+			
+			case 19: // IEEE80211_RADIOTAP_MCS
+				body += 3*sizeof(uint8_t);
+				break;
+				
+			default:
+				i = IEEE80211_RADIOTAP_EXT+1;
+				break;
+		}
+	}
+	
+	/* set power */
+	if (ri) {
+		if (dbm_power)
+			ri->ri_power = dbm_power;
+		else
+			ri->ri_power = db_power;
+	}
+	
+#define IEEE80211_RADIOTAP_F_BADFCS 0x40
+	if (rflags & IEEE80211_RADIOTAP_F_BADFCS) {
+		// bad FCS, ignore
+		*fcs_ok = 0;
+	}
+	if (rflags & IEEE80211_RADIOTAP_F_FCS) {
+		*plen -= 4;
+	}
+}
+
+static unsigned char *get_80211(struct priv_darwin *pn, int *plen,
+								struct rx_info *ri)
+{
+	struct bpf_hdr *bpfh;
+	struct ieee80211_radiotap_header *rth;
+	void *ptr;
+	unsigned char **data;
+	int *totlen;
+	int fcs_ok = 1;
+	
+	data = &pn->pn_next;
+	totlen = &pn->pn_totlen;
+	assert(*totlen);
+	
+	/* bpf hdr */
+	bpfh = (struct bpf_hdr*) (*data);
+	assert(bpfh->bh_caplen == bpfh->bh_datalen); /* XXX */
+	*totlen -= bpfh->bh_hdrlen;
+	
+	/* check if more packets */
+	if ((int)bpfh->bh_caplen < *totlen) {
+		int tot = bpfh->bh_hdrlen + bpfh->bh_caplen;
+		int offset = BPF_WORDALIGN(tot);
+		
+		*data = (unsigned char*)bpfh + offset;
+		*totlen -= offset - tot; /* take into account align bytes */
+	} else if ((int)bpfh->bh_caplen > *totlen)
+		abort();
+	
+	*plen = bpfh->bh_caplen;
+	*totlen -= bpfh->bh_caplen;
+	assert(*totlen >= 0);
+	
+	/* radiotap */
+	rth = (struct ieee80211_radiotap_header*)((char*)bpfh + bpfh->bh_hdrlen);
+	get_radiotap_info(pn, rth, plen, ri, &fcs_ok);
+	if (!fcs_ok) return NULL;
+	*plen -= rth->it_len;
+	if (!(*plen > 0)) return NULL;
+	
+	/* data */
+	ptr = (char*)rth + rth->it_len;
+	
+	return ptr;
+}
+
+static int darwin_set_channel(struct wif *wi, int chan)
+{
+	pid_t pid = fork();
+	if (!pid) {
+		char chan_arg[32];
+		sprintf(chan_arg, "-c%d", chan);
+		char* argv[] = {"/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport", chan_arg, nil};
+		execve("/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport", argv, NULL);
+	}
+	int status;
+	waitpid(pid,&status,0);
+	return 0;
+}
+
+static int darwin_write(struct wif *wi, unsigned char *h80211, int len,
+					  struct tx_info *ti)
+{
+	struct priv_darwin *pn = wi_priv(wi);
+	int rc;
+	
+	/* XXX make use of ti */
+	if (ti) {}
+	
+	// prepend radiotap header
+	char* final_pkt = malloc(sizeof(struct ieee80211_radiotap_header)+len);
+	struct ieee80211_radiotap_header *rth = final_pkt;
+	rth->it_version = 0;
+	rth->it_present = 0;
+	rth->it_len = sizeof(struct ieee80211_radiotap_header);
+	memcpy(final_pkt+sizeof(struct ieee80211_radiotap_header), h80211, len);
+	
+	rc = write(pn->pn_fd, final_pkt, sizeof(struct ieee80211_radiotap_header)+len);
+	if (rc == -1) {
+		return rc;
+	}
+	
+	return 0;
+}
+
+static void darwin_close(struct wif *wi)
+{
+	struct priv_darwin *pn = wi_priv(wi);
+	
+	close(pn->pn_fd);
+	do_free(wi);
+}
+
+
+static int darwin_get_channel(struct wif *wi)
+{
+	int outChan;
+	@try {
+		NSTask* task = [[NSTask alloc] init];
+		[task setLaunchPath:@"/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport"];
+		[task setArguments:[NSArray arrayWithObjects:@"-I", @"-x", nil]];
+		
+		NSPipe* pipe = [NSPipe pipe];
+		[task setStandardOutput:pipe];
+		[task launch];
+		[task waitUntilExit];
+		
+		NSData* data = [[pipe fileHandleForReading] readDataToEndOfFile];
+		
+		NSDictionary* outdict = [NSPropertyListSerialization propertyListWithData:data options:NSPropertyListImmutable format:nil error:nil];
+		outChan = [[outdict objectForKey:@"CHANNEL"] intValue];
+	}
+	@catch (NSException *exception) {
+		outChan = 0;
+	}
+	return outChan;
+}
+
+static int darwin_read(struct wif *wi, unsigned char *h80211, int len,
+					   struct rx_info *ri)
+{
+	struct priv_darwin *pn = wi_priv(wi);
+	unsigned char *wh;
+	int plen;
+	
+	assert(len > 0);
+	
+	/* need to read more */
+	if (pn->pn_totlen == 0) {
+		pn->pn_totlen = read(pn->pn_fd, pn->pn_buf, sizeof(pn->pn_buf));
+		if (pn->pn_totlen == -1) {
+			pn->pn_totlen = 0;
+			return -1;
+		}
+		pn->pn_next = pn->pn_buf;
+	}
+	
+	/* read 802.11 packet */
+	wh = get_80211(pn, &plen, ri);
+	if (!wh) {
+		// likely due to bad fcs
+		// return 0 because this is not fatal
+		return 0;
+	}
+	if (plen > len)
+		plen = len;
+	assert(plen > 0);
+	memcpy(h80211, wh, plen);
+	
+	return plen;
+}
+
+static int darwin_set_mac(struct wif *wi, unsigned char *mac)
+{
+	// NOT SUPPORTED
+	return 0;
+}
+
+static int darwin_get_monitor(struct wif *wi)
+{
+	if (wi) {} /* XXX unused */
+	/* XXX */
+	return 0;
+}
+
+static int darwin_get_rate(struct wif *wi)
+{
+	struct priv_darwin *pn = wi_priv(wi);
+	return 100000;
+}
+
+static int darwin_set_rate(struct wif *wi, int rate)
+{
+	// not supported
+
+	return 0;
+}
+
+static int darwin_fd(struct wif *wi)
+{
+	struct priv_darwin *pn = wi_priv(wi);
+	return pn->pn_fd;
+}
+
+static int darwin_get_mac(struct wif *wi, unsigned char *mac)
+{
+	struct ifaddrs *ifa, *p;
+	char *name = wi_get_ifname(wi);
+	int rc = -1;
+	struct sockaddr_dl* sdp;
+	
+	if (getifaddrs(&ifa) == -1)
+		return -1;
+	
+	p = ifa;
+	while (p) {
+		if (p->ifa_addr->sa_family == AF_LINK &&
+		    strcmp(name, p->ifa_name) == 0) {
+			
+			sdp = (struct sockaddr_dl*) p->ifa_addr;
+			memcpy(mac, sdp->sdl_data + sdp->sdl_nlen, 6);
+			rc = 0;
+			break;
+		}
+		
+		p = p->ifa_next;
+	}
+	freeifaddrs(ifa);
+	
+	return rc;
+}
+
+static int do_darwin_open(struct wif *wi, char *iface)
+{
+	unsigned int dlt = DLT_IEEE802_11_RADIO;
+	char buf[64];
+	int i, fd = -1;
+	for(i = 0; i < 256; i++) {
+		snprintf(buf, sizeof(buf), "/dev/bpf%d", i);
+		fd = open(buf, O_RDWR);
+		if(fd < 0) {
+			continue;
+		}
+		break;
+	}
+	if (fd == -1)
+		return fd;
+		
+	struct ifreq ifr;
+	strncpy(ifr.ifr_name, iface, IFNAMSIZ);
+	if (ioctl(fd, BIOCSETIF, &ifr) < 0)
+		goto close_bpf;
+	
+	if (ioctl(fd, BIOCSDLT, &dlt) < 0)
+		goto close_bpf;
+
+	if(ioctl(fd, BIOCPROMISC, NULL) < 0)
+		goto close_bpf;
+	
+	dlt = 1;
+	if (ioctl(fd, BIOCIMMEDIATE, &dlt) == -1)
+		goto close_bpf;
+
+	if (ioctl(fd, BIOCSHDRCMPLT, &dlt) == -1)
+		goto close_bpf;
+	
+	return fd;
+
+close_bpf:
+	close(fd);
+	return -1;
+
+}
+
+
+static struct wif *darwin_open(char *iface)
+{
+	struct wif *wi;
+	struct priv_darwin *pn;
+	int fd;
+	
+	/* setup wi struct */
+	wi = wi_alloc(sizeof(*pn));
+	if (!wi)
+		return NULL;
+	wi->wi_read			= darwin_read;
+	wi->wi_write		= darwin_write;
+	wi->wi_set_channel	= darwin_set_channel;
+	wi->wi_get_channel	= darwin_get_channel;
+	wi->wi_close		= darwin_close;
+	wi->wi_fd			= darwin_fd;
+	wi->wi_get_mac		= darwin_get_mac;
+	wi->wi_set_mac		= darwin_set_mac;
+	wi->wi_get_rate		= darwin_get_rate;
+	wi->wi_set_rate		= darwin_set_rate;
+	wi->wi_get_monitor  = darwin_get_monitor;
+	
+	/* setup iface */
+	fd = do_darwin_open(wi, iface);
+	if (fd == -1) {
+		do_free(wi);
+		return NULL;
+	}
+		
+	/* setup private state */
+	pn = wi_priv(wi);
+	pn->pn_fd = fd;
+	pn->pn_iface = strdup(iface);
+	
+	pid_t pid = fork();
+	if (!pid) {
+		char* argv[] = {"/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport", "-z", nil};
+		execve("/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport", argv, NULL);
+	}
+	int status;
+	waitpid(pid,&status,0);
+	
+	return wi;
+}
+
+struct wif *wi_open_osdep(char *iface)
+{
+	return darwin_open(iface);
+}
+
+
+int get_battery_state(void)
+{
+	errno = EOPNOTSUPP;
+	return -1;
+}
+
+int create_tap(void)
+{
+	errno = EOPNOTSUPP;
+	return -1;
+}
Index: src/osdep/darwin.c
===================================================================
--- src/osdep/darwin.c	(revision 2178)
+++ src/osdep/darwin.c	(working copy)
@@ -1,45 +0,0 @@
- /*
-  *  Copyright (c) 2009, Kyle Fuller <inbox@kylefuller.co.uk>, based upon 
-  *  freebsd.c by Andrea Bittau <a.bittau@cs.ucl.ac.uk>
-  *
-  *  OS dependent API for Darwin.
-  *
-  *  This program is free software; you can redistribute it and/or modify
-  *  it under the terms of the GNU General Public License as published by
-  *  the Free Software Foundation; either version 2 of the License, or
-  *  (at your option) any later version.
-  *
-  *  This program is distributed in the hope that it will be useful,
-  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  *  GNU General Public License for more details.
-  *
-  *  You should have received a copy of the GNU General Public License
-  *  along with this program; if not, write to the Free Software
-  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-  */
-
-#include <errno.h>
-#include <stdio.h>
-
-#include "osdep.h"
-
-struct wif *wi_open_osdep(char *iface)
-{
-	if (iface) {} /* XXX unused parameter */
-
-	errno = EOPNOTSUPP;
-	return NULL;
-}
-
-int get_battery_state(void)
-{
-	errno = EOPNOTSUPP;
-	return -1;
-}
-
-int create_tap(void)
-{
-	errno = EOPNOTSUPP;
-	return -1;
-}
Index: src/Makefile
===================================================================
--- src/Makefile	(revision 2178)
+++ src/Makefile	(working copy)
@@ -103,6 +103,9 @@
 ifeq ($(OSNAME), cygwin)
 LIBS		+= -liphlpapi -lsetupapi -luuid
 endif
+ifeq ($(OSNAME), Darwin)
+LIBS		+= -framework Foundation
+endif
 LIBOSD		= $(OSD)/lib$(OSD).a
 
 LIBSSL		= -lssl -lcrypto
