diff -uNr aircrack-ng-1.0rc2/src/aircrack-ng.c aircrack-ng-1.0rc2-one-at-a-time/src/aircrack-ng.c
--- aircrack-ng-1.0rc2/src/aircrack-ng.c	2008-10-26 17:38:05.000000000 -0700
+++ aircrack-ng-1.0rc2-one-at-a-time/src/aircrack-ng.c	2008-10-30 12:36:31.000000000 -0700
@@ -3602,8 +3602,8 @@
 int crack_wpa_thread( void *arg )
 {
 	char  essid[36];
-	char  key1[128], key2[128];
-	uchar pmk1[128], pmk2[128];
+	char  key[128];
+	uchar pmk[128];
         int len1, len2;
 	int ret=0;
 
@@ -3626,37 +3626,31 @@
 	{
 		/* receive two passphrases */
 
-		memset( key1, 0, sizeof( key1 ) );
-		memset( key2, 0, sizeof( key2 ) );
+		memset( key, 0, sizeof( key ) );
 
-		if( safe_read( mc_pipe[cid][0], (void *) key1, 128 ) != 128 ||
-			safe_read( mc_pipe[cid][0], (void *) key2, 128 ) != 128 )
+		if(safe_read( mc_pipe[cid][0], (void *) key, 128 ) != 128 )
 		{
 			perror( "read passphrase failed" );
 			kill( 0, SIGTERM );
 			_exit( FAILURE );
 		}
 
-		key1[127] = '\0';
-		key2[127] = '\0';
+		key[127] = '\0';
 
-                len1 = strlen( key1 );
-                len2 = strlen( key1 );
+                len1 = strlen( key );
+                len2 = strlen( key );
                 if(len1 > 64 ) len1 = 64;
                 if(len2 > 64 ) len2 = 64;
 
                 if(len1 < 8) len1 = 8;
                 if(len2 < 8) len2 = 8;
 
-		calc_pmk( key1, essid, pmk1 );
-		calc_pmk( key2, essid, pmk2 );
+		calc_pmk( key, essid, pmk );
 
 		/* send the passphrase & master keys */
 
-		if( safe_write( cm_pipe[cid][1], (void *) key1, 128 ) != 128 ||
-			safe_write( cm_pipe[cid][1], (void *) key2, 128 ) != 128 ||
-			safe_write( cm_pipe[cid][1], (void *) pmk1,  32 ) !=  32 ||
-			safe_write( cm_pipe[cid][1], (void *) pmk2,  32 ) !=  32 )
+		if( safe_write( cm_pipe[cid][1], (void *) key, 128 ) != 128 ||
+			safe_write( cm_pipe[cid][1], (void *) pmk,  32 ) !=  32 )
 		{
 			perror( "write pmk failed" );
 			kill( 0, SIGTERM );
@@ -3700,7 +3694,7 @@
 	if( opt.l33t ) printf( "\33[33;1m" );
 	printf( "\33[5;20H[%02d:%02d:%02d] %lld keys tested "
 		"(%2.2f k/s)", et_h, et_m, et_s,
-		nb_tried, (float) nb_kprev / delta );
+		nb_tried, (float) nb_kprev / delta / 2 );
 
 	memset( tmpbuf, ' ', sizeof( tmpbuf ) );
 	memcpy( tmpbuf, key, keylen > 27 ? 27 : keylen );
@@ -3781,7 +3775,7 @@
 			{
 				fclose( opt.dict );
 				opt.dict = NULL;
-				printf( "Empty dictionnary\n" );
+				printf( "Empty dictionary\n" );
 				opt.nbdict++;
 				continue;
 			}
@@ -3843,12 +3837,11 @@
 int do_wpa_crack( struct AP_info *ap )
 {
 	int i, j, cid, len1, len2, num_cpus;
-	char key1[128], key2[128];
+	char key[128];
 
 	uchar pke[100];
-	uchar pmk1[40], ptk1[80];
-	uchar pmk2[40], ptk2[80];
-	uchar mic1[20], mic2[20];
+	uchar pmk[40], ptk[80];
+	uchar mic[20];
 
         i=0;
 
@@ -3892,8 +3885,7 @@
 		memcpy( pke + 67, ap->wpa.snonce, 32 );
 	}
 
-	memset( key1, 0, sizeof( key1 ) );
-	memset( key2, 0, sizeof( key1 ) );
+	memset( key, 0, sizeof( key ) );
 
 	if( ! opt.is_quiet )
 	{
@@ -3916,18 +3908,18 @@
 
 			if(opt.dict == NULL)
 			{
-				printf( "\nPassphrase not in dictionnary \n" );
+				printf( "\nPassphrase not in dictionary \n" );
 				return( FAILURE );
 			}
 
 			do
 			{
-				if( fgets( key1, sizeof( key1 ), opt.dict ) == NULL )
+				if( fgets( key, sizeof( key ), opt.dict ) == NULL )
 				{
 					if( opt.l33t )
 						printf( "\33[32;22m" );
 
-					/* printf( "\nPassphrase not in dictionnary %s \n", opt.dicts[opt.nbdict] );*/
+					/* printf( "\nPassphrase not in dictionary %s \n", opt.dicts[opt.nbdict] );*/
 					if(next_dict(opt.nbdict+1) != 0)
 					{
 						/* no more words, but we still have to collect results from words sent to previous cpus */
@@ -3941,53 +3933,24 @@
 					}
 				}
 
-				i = strlen( key1 );
+				i = strlen( key );
                                 if( i < 8 ) continue;
                                 if( i > 64 ) i = 64;
 
-				if( key1[i - 1] == '\n' ) key1[--i] = '\0';
-				if( key1[i - 1] == '\r' ) key1[--i] = '\0';
-				if( key1[i - 1] == '\n' ) key1[--i] = '\0';
-				if( key1[i - 1] == '\r' ) key1[--i] = '\0';
+				if( key[i - 1] == '\n' ) key[--i] = '\0';
+				if( key[i - 1] == '\r' ) key[--i] = '\0';
+				if( key[i - 1] == '\n' ) key[--i] = '\0';
+				if( key[i - 1] == '\r' ) key[--i] = '\0';
 
                                 for(j=0; j<i; j++)
-                                    if(!isascii(key1[j]) || key1[j] < 32) i=0;
+                                    if(!isascii(key[j]) || key[j] < 32) i=0;
 			}
-			while( i < 8 );
-
-			do
-			{
-				if( fgets( key2, sizeof( key2 ), opt.dict ) == NULL )
-				{
-					if(next_dict(opt.nbdict+1) != 0)
-					{
-						break;
-					}
-					else
-					{
-						continue;
-					}
-				}
 
-				i = strlen( key2 );
-
-                                if( i < 8 ) continue;
-                                if( i > 64 ) i = 64;
-
-				if( key2[i - 1] == '\n' ) key2[--i] = '\0';
-				if( key2[i - 1] == '\r' ) key2[--i] = '\0';
-				if( key2[i - 1] == '\n' ) key2[--i] = '\0';
-				if( key2[i - 1] == '\r' ) key2[--i] = '\0';
-
-                                for(j=0; j<i; j++)
-                                    if(!isascii(key2[j]) || key2[j] < 32 ) i=0;
-			}
 			while( i < 8 );
 
 			/* send the keys */
 
-			if( safe_write( mc_pipe[cid][1], (void *) key1, 128 ) != 128 ||
-				safe_write( mc_pipe[cid][1], (void *) key2, 128 ) != 128 )
+			if( safe_write( mc_pipe[cid][1], (void *) key, 128 ) != 128 )
 			{
 				perror( "write passphrase failed" );
 				return( FAILURE );
@@ -4000,17 +3963,14 @@
 		{
 			/* collect and test the master keys */
 
-			if( safe_read( cm_pipe[cid][0], (void *) key1, 128 ) != 128 ||
-				safe_read( cm_pipe[cid][0], (void *) key2, 128 ) != 128 ||
-				safe_read( cm_pipe[cid][0], (void *) pmk1,  32 ) !=  32 ||
-				safe_read( cm_pipe[cid][0], (void *) pmk2,  32 ) !=  32 )
+			if( safe_read( cm_pipe[cid][0], (void *) key, 128 ) != 128 ||
+				safe_read( cm_pipe[cid][0], (void *) pmk,  32 ) !=  32 )
 			{
 				perror( "read pmk failed" );
 				return( FAILURE );
 			}
 
-			len1 = strlen( key1 );
-			len2 = strlen( key2 );
+			len2 = strlen( key );
 
                         if( len1 < 8 ) len1=8;
                         if( len1 > 64 ) len1 = 64;
@@ -4023,44 +3983,33 @@
 			for( i = 0; i < 4; i++ )
 			{
 				pke[99] = i;
-				HMAC(EVP_sha1(), pmk1, 32, pke, 100, ptk1 + i * 20, NULL);
-				HMAC(EVP_sha1(), pmk2, 32, pke, 100, ptk2 + i * 20, NULL);
+				HMAC(EVP_sha1(), pmk, 32, pke, 100, ptk + i * 20, NULL);
 			}
 
 			if( ap->wpa.keyver == 1 )
 			{
-				HMAC(EVP_md5(), ptk1, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic1, NULL);
-				HMAC(EVP_md5(), ptk2, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic2, NULL);
+				HMAC(EVP_md5(), ptk, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic, NULL);
 			}
 			else
 			{
-				HMAC(EVP_sha1(), ptk1, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic1, NULL);
-				HMAC(EVP_sha1(), ptk2, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic2, NULL);
+				HMAC(EVP_sha1(), ptk, 16, ap->wpa.eapol, ap->wpa.eapol_size, mic, NULL);
 			}
 
-			if( memcmp( mic1, ap->wpa.keymic, 16 ) == 0 )
-			{
-				memcpy( key2, key1, 128 );
-				memcpy( pmk2, pmk1,  32 );
-				memcpy( ptk2, ptk1,  64 );
-				memcpy( mic2, mic1,  16 );
-			}
-
-			if( memcmp( mic2, ap->wpa.keymic, 16 ) == 0 )
+			if( memcmp( mic, ap->wpa.keymic, 16 ) == 0 )
 			{
 				if( opt.is_quiet )
 				{
-					printf( "KEY FOUND! [ %s ]\n", key2 );
+					printf( "KEY FOUND! [ %s ]\n", key );
 					return( SUCCESS );
 				}
 
-				show_wpa_stats( key2, len1, pmk2, ptk2, mic2, 1 );
+				show_wpa_stats( key, len1, pmk, ptk, mic, 1 );
 
 				if( opt.l33t )
 					printf( "\33[31;1m" );
 
 				printf( "\33[8;%dH\33[2KKEY FOUND! [ %s ]\33[11B\n",
-					( 80 - 15 - (int) len1 ) / 2, key2 );
+					( 80 - 15 - (int) len1 ) / 2, key );
 
 				if( opt.l33t )
 					printf( "\33[32;22m" );
@@ -4072,11 +4021,13 @@
 			nb_kprev += 2;
 
 			if( ! opt.is_quiet )
-				show_wpa_stats( key1, len1, pmk1, ptk1, mic1, 0 );
+				show_wpa_stats( key, len1, pmk, ptk, mic, 0 );
+
+
 		}
 	}
 
-	printf( "\nPassphrase not in dictionnary \n" );
+	printf( "\nPassphrase not in dictionary \n" );
 	return( FAILURE );
 }
 
@@ -4095,7 +4046,7 @@
 		tmp = tmp2;
 		if(opt.dict == NULL)
 		{
-			printf( "\nPassphrase not in dictionnary \n" );
+			printf( "\nPassphrase not in dictionary \n" );
 			free(tmp);
 			tmp = NULL;
 			return( FAILURE );
@@ -4108,7 +4059,7 @@
 				if( opt.l33t )
 					printf( "\33[32;22m" );
 
-//				printf( "\nPassphrase not in dictionnary \"%s\" \n", opt.dicts[opt.nbdict] );
+//				printf( "\nPassphrase not in dictionary \"%s\" \n", opt.dicts[opt.nbdict] );
 				if(next_dict(opt.nbdict+1) != 0)
 				{
 					free(tmp);
@@ -4162,7 +4113,7 @@
 				if( opt.l33t )
 					printf( "\33[32;22m" );
 
-//				printf( "\nPassphrase not in dictionnary \"%s\" \n", opt.dicts[opt.nbdict] );
+//				printf( "\nPassphrase not in dictionary \"%s\" \n", opt.dicts[opt.nbdict] );
 				if(next_dict(opt.nbdict+1) != 0)
 				{
 					free(tmp);
